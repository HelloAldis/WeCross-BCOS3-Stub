package com.webank.wecross.stub.bcos3.performance.hellowecross.proxy;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.v3.client.Client;
import org.fisco.bcos.sdk.v3.codec.datatypes.Address;
import org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray;
import org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes;
import org.fisco.bcos.sdk.v3.codec.datatypes.Function;
import org.fisco.bcos.sdk.v3.codec.datatypes.Type;
import org.fisco.bcos.sdk.v3.codec.datatypes.TypeReference;
import org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple6;
import org.fisco.bcos.sdk.v3.contract.Contract;
import org.fisco.bcos.sdk.v3.crypto.CryptoSuite;
import org.fisco.bcos.sdk.v3.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.v3.model.CryptoType;
import org.fisco.bcos.sdk.v3.model.TransactionReceipt;
import org.fisco.bcos.sdk.v3.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.v3.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class WeCrossProxy extends Contract {
    public static final String[] BINARY_ARRAY = {
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "9fdb81619c35565b9050919050565b60006020820190508181036000830152619ffb81619c92565b9050919050565b6000602082019050818103600083015261a01b81619cef565b9050919050565b6000602082019050818103600083015261a03b81619d26565b9050919050565b6000602082019050818103600083015261a05b81619d5d565b9050919050565b6000602082019050818103600083015261a07b81619dba565b9050919050565b6000602082019050818103600083015261a09b81619df1565b9050919050565b6000602082019050818103600083015261a0bb81619e28565b9050919050565b600060208201905061a0d76000830184619e85565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561a10057600080fd5b8060405250919050565b600067ffffffffffffffff82111561a12157600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561a14957600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561a17157600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561a19957600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561a1c557600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561a1f157600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600061a2578261a25e565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061a2938261a25e565b9050919050565b60008160030b9050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561a2de57808201518184015260208101905061a2c3565b8381111561a2ed576000848401525b50505050565b6000601f19601f830116905091905056fe20697320756e7265676973746572656420696e207861207472616e73616374696f6e20206973206c6f636b656420627920756e66696e6973686564207861207472616e73616374696f6e3a207265736f75726365206973206c6f636b656420627920756e66696e6973686564207861207472616e73616374696f6e3a2020697320756e7265676973746572656420696e207861207472616e73616374696f6e3a20a265627a7a723058208ec505aceeb5796d2726682897b9bd324551a30410197a8ca424c0edfaa72c456c6578706572696d656e74616cf50037"
    };

    public static final String BINARY =
            org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {
        "",
        "",
        "ffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060008373ffffffffffffffffffffffffffffffffffffffff1682846040516020018083805190602001908083835b602083101515612072578051825260208201915060208101905060208303925061204d565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b6020831015156120c557805182526020820191506020810190506020830392506120a0565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040526040518082805190602001908083835b60208310151561212f578051825260208201915060208101905060208303925061210a565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612191576040519150601f19603f3d011682016040523d82523d6000602084013e612196565b606091505b5050809150508015156122bb5789856040516020018083805190602001908083835b6020831015156121dd57805182526020820191506020810190506020830392506121b8565b6001836020036101000a038019825116818451168082178552505050505050905001807f207265766572742022000000000000000000000000000000000000000000000081525060090182805190602001908083835b6020831015156122585780518252602082019150602081019050602083039250612233565b6001836020036101000a038019825116818451168082178552505050505050905001807f22206661696c65642e0000000000000000000000000000000000000000000000815250600901925050506040516020818303038152906040529950899a505b50505050505050808060019003915050611bca565b506103e8428115156122de57fe5b046001866040518082805190602001908083835b60208310151561231757805182526020820191506020810190506020830392506122f2565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600601819055506040805190810160405280600a81526020017f726f6c6c65646261636b000000000000000000000000000000000000000000008152506001866040518082805190602001908083835b6020831015156123bf578051825260208201915060208101905060208303925061239a565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206003019080519060200190612408929190618e3c565b506124128561669a565b829350505050919050565b6000606061242a856163f8565b905060006124398260006161b3565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141580156124c357506000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff165b1561261757816000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016040516020018083805190602001908083835b602083101515612542578051825260208201915060208101905060208303925061251d565b6001836020036101000a0380198251168184511680821785525050505050509050018061a33660299139602901828054600181600116156101000203166002900480156125c65780601f106125a45761010080835404028352918201916125c6565b820191906000526020600020905b8154815290600101906020018083116125b2575b5050925050506040516020818303038152906040526040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161260e9190619ef3565b60405180910390fd5b60006126228661292e565b9050600061100e73ffffffffffffffffffffffffffffffffffffffff166348fd6f59856040805190810160405280600681526020017f6c6174657374000000000000000000000000000000000000000000000000000081525061268486616c82565b8a6040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016126c09493929190619f61565b602060405180830381600087803b1580156126da57600080fd5b505af11580156126ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506127129190810190619578565b90508060030b60001415156128d157836040805190810160405280600681526020017f6c61746573740000000000000000000000000000000000000000000000000000815250826040516020018084805190602001908083835b602083101515612791578051825260208201915060208101905060208303925061276c565b6001836020036101000a038019825116818451168082178552505050505050905001807f3a0000000000000000000000000000000000000000000000000000000000000081525060010183805190602001908083835b60208310151561280c57805182526020820191506020810190506020830392506127e7565b6001836020036101000a038019825116818451168082178552505050505050905001807f20756e61626c65206c696e6b20746f204246532c206572726f723a2000000000815250601c018260030b60030b7c010000000000000000000000000000000000000000000000000000000002815260040193505050506040516020818303038152906040526040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016128c89190619ef3565b60405180910390fd5b600688908060018154018082558091505090600182039060005260206000200160009091929091909150908051906020019061290e929190618e3c565b5050819450505050509392505050565b6006600061292c9190618ebc565b565b600080600090508251602084016000f091506000823b119050801515612989576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016129809061a062565b60405180910390fd5b50919050565b6060600061299c83616f2c565b90506000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff161515612a31576040805190810160405280600481526020017f6e756c6c00000000000000000000000000000000000000000000000000000000815250915050612d17565b60606000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612b085780601f10612add57610100808354040283529160200191612b08565b820191906000526020600020905b815481529060010190602001808311612aeb57829003601f168201915b5050505050905060006001826040518082805190602001908083835b602083101515612b495780518252602082019150602081019050602083039250612b24565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206008015490506000808214612c19576001836040518082805190602001908083835b602083101515612bc35780518252602082019150602081019050602083039250612b9e565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060070160018303815481101515612c0957fe5b9060005260206000200154612c1c565b60005b905082612c2882615f53565b6040516020018083805190602001908083835b602083101515612c605780518252602082019150602081019050602083039250612c3b565b6001836020036101000a038019825116818451168082178552505050505050905001807f200000000000000000000000000000000000000000000000000000000000000081525060010182805190602001908083835b602083101515612cdb5780518252602082019150602081019050602083039250612cb6565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040529450505050505b919050565b60606006805480602002602001604051908101604052809291908181526020016000905b82821015612dfc578382906000526020600020018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612de85780601f10612dbd57610100808354040283529160200191612de8565b820191906000526020600020905b815481529060010190602001808311612dcb57829003601f168201915b505050505081526020019060010190612d40565b50505050905090565b6060612e1084616604565b15612f0e578360405160200180807f7861207472616e73616374696f6e200000000000000000000000000000000000815250600f0182805190602001908083835b602083101515612e765780518252602082019150602081019050602083039250612e51565b6001836020036101000a038019825116818451168082178552505050505050905001807f20616c7265616479206578697374730000000000000000000000000000000000815250600f019150506040516020818303038152906040526040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401612f059190619ef3565b60405180910390fd5b600083519050600083519050606082604051908082528060200260200182016040528015612f4b5781602001602082028038833980820191505090505b5090506060828401604051908082528060200260200182016040528015612f8657816020015b6060815260200190600190039081612f715790505b50905060008090505b848110156132b1576000612fb98983815181101515612faa57fe5b90602001906020020151616f2c565b9050808483815181101515612fca57fe5b906020019060200201",
        "",
        "",
        "",
        "",
        "",
        "",
        "9036579160200282015b828111156190355782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190618fdd565b5b509050619043919061912d565b5090565b828054828255906000526020600020908101928215619083579160200282015b82811115619082578251825591602001919060010190619067565b5b50905061909091906190dc565b5090565b50805460018160011615610100020316600290046000825580601f106190ba57506190d9565b601f0160209004906000526020600020908101906190d891906190dc565b5b50565b6190fe91905b808211156190fa5760008160009055506001016190e2565b5090565b90565b61912a91905b80821115619126576000818161911d9190619094565b50600101619107565b5090565b90565b61916d91905b8082111561916957600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550600101619133565b5090565b90565b600061917c825161a288565b905092915050565b600082601f830112151561919757600080fd5b81516191aa6191a58261a10a565b61a0dd565b9150818183526020840193506020810190508360005b838110156191f057815186016191d688826193a6565b8452602084019350602083019250506001810190506191c0565b5050505092915050565b600082601f830112151561920d57600080fd5b813561922061921b8261a132565b61a0dd565b9150818183526020840193506020810190508360005b83811015619266578135860161924c8882619350565b845260208401935060208301925050600181019050619236565b5050505092915050565b600082601f830112151561928357600080fd5b81516192966192918261a15a565b61a0dd565b9150818183526020840193506020810190508360005b838110156192dc57815186016192c28882619452565b8452602084019350602083019250506001810190506192ac565b5050505092915050565b600082601f83011215156192f957600080fd5b813561930c6193078261a182565b61a0dd565b9150808252602083016020830185838301111561932857600080fd5b61933383828461a2b1565b50505092915050565b6000619348825161a29a565b905092915050565b600082601f830112151561936357600080fd5b81356193766193718261a1ae565b61a0dd565b9150808252602083016020830185838301111561939257600080fd5b61939d83828461a2b1565b50505092915050565b600082601f83011215156193b957600080fd5b81516193cc6193c78261a1ae565b61a0dd565b915080825260208301602083018583830111156193e857600080fd5b6193f383828461a2c0565b50505092915050565b600082601f830112151561940f57600080fd5b813561942261941d8261a1da565b61a0dd565b9150808252602083016020830185838301111561943e57600080fd5b61944983828461a2b1565b50505092915050565b60006060828403121561946457600080fd5b61946e606061a0dd565b9050600082015167ffffffffffffffff81111561948a57600080fd5b619496848285016193a6565b600083015250602082015167ffffffffffffffff8111156194b657600080fd5b6194c2848285016193a6565b602083015250604082015167ffffffffffffffff8111156194e257600080fd5b6194ee84828501619184565b60408301525092915050565b6000619506823561a2a7565b905092915050565b60006020828403121561952057600080fd5b600061952e84828501619170565b91505092915050565b60006020828403121561954957600080fd5b600082013567ffffffffffffffff81111561956357600080fd5b61956f848285016192e6565b91505092915050565b60006020828403121561958a57600080fd5b60006195988482850161933c565b91505092915050565b600080604083850312156195b457600080fd5b60006195c28582860161933c565b925050602083015167ffffffffffffffff8111156195df57600080fd5b6195eb85828601619270565b9150509250929050565b60006020828403121561960757600080fd5b600082013567ffffffffffffffff81111561962157600080fd5b61962d848285016193fc565b91505092915050565b60008060006060848603121561964b57600080fd5b600084013567ffffffffffffffff81111561966557600080fd5b619671868287016193fc565b935050602084013567ffffffffffffffff81111561968e57600080fd5b61969a868287016191fa565b925050604084013567ffffffffffffffff8111156196b757600080fd5b6196c3868287016191fa565b9150509250925092565b600080604083850312156196e057600080fd5b600083013567ffffffffffffffff8111156196fa57600080fd5b619706858286016193fc565b925050602083013567ffffffffffffffff81111561972357600080fd5b61972f858286016192e6565b9150509250929050565b60008060006060848603121561974e57600080fd5b600084013567ffffffffffffffff81111561976857600080fd5b619774868287016193fc565b935050602084013567ffffffffffffffff81111561979157600080fd5b61979d868287016192e6565b925050604084013567ffffffffffffffff8111156197ba57600080fd5b6197c6868287016193fc565b9150509250925092565b6000806000606084860312156197e557600080fd5b600084013567ffffffffffffffff8111156197ff57600080fd5b61980b868287016193fc565b935050602084013567ffffffffffffffff81111561982857600080fd5b619834868287016193fc565b925050604084013567ffffffffffffffff81111561985157600080fd5b61985d868287016192e6565b9150509250925092565b60008060006060848603121561987c57600080fd5b600084013567ffffffffffffffff81111561989657600080fd5b6198a2868287016193fc565b935050602084013567ffffffffffffffff8111156198bf57600080fd5b6198cb868287016193fc565b925050604084013567ffffffffffffffff8111156198e857600080fd5b6198f4868287016193fc565b9150509250925092565b6000806000806080858703121561991457600080fd5b600085013567ffffffffffffffff81111561992e57600080fd5b61993a878288016193fc565b945050602085013567ffffffffffffffff81111561995757600080fd5b619963878288016193fc565b935050604085013567ffffffffffffffff81111561998057600080fd5b61998c878288016193fc565b925050606085013567ffffffffffffffff8111156199a957600080fd5b6199b5878288016192e6565b91505092959194509250565b60008060008060008060c087890312156199da57600080fd5b600087013567ffffffffffffffff8111156199f457600080fd5b619a0089828a016193fc565b965050602087013567ffffffffffffffff811115619a1d57600080fd5b619a2989828a016193fc565b9550506040619a3a89828a016194fa565b945050606087013567ffffffffffffffff811115619a5757600080fd5b619a6389828a016193fc565b935050608087013567ffffffffffffffff811115619a8057600080fd5b619a8c89828a016193fc565b92505060a087013567ffffffffffffffff811115619aa957600080fd5b619ab589828a016192e6565b9150509295509295509295565b60008060408385031215619ad557600080fd5b600083013567ffffffffffffffff811115619aef57600080fd5b619afb858286016193fc565b9250506020619b0c858286016194fa565b9150509250929050565b619b1f8161a24c565b82525050565b6000619b308261a213565b80845260208401935083602082028501619b498561a206565b60005b84811015619b82578383038852619b64838351619bff565b9250619b6f8261a23f565b9150602088019750600181019050619b4c565b508196508694505050505092915050565b6000619b9e8261a21e565b808452619bb281602086016020860161a2c0565b619bbb8161a2f3565b602085010191505092915050565b6000619bd48261a234565b808452619be881602086016020860161a2c0565b619bf18161a2f3565b602085010191505092915050565b6000619c0a8261a229565b808452619c1e81602086016020860161a2c0565b619c278161a2f3565b602085010191505092915050565b6000601882527f7861207472616e73616374696f6e206e6f7420666f756e6400000000000000006020830152604082019050919050565b6000601d82527f746865206e616d6527732061646472657373206e6f742065786973742e0000006020830152604082019050919050565b6000602182527f64656c657465206e6f6e6578697374656e74207861207472616e73616374696f60208301527f6e000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000602182527f7861207472616e73616374696f6e20686173206265656e20636f6d6d6974746560208301527f64000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000602282527f7861207472616e73616374696f6e20686173206265656e20726f6c6c6564626160208301527f636b0000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000601682527f6465706c6f7920636f6e7472616374206661696c6564000000000000000000006020830152604082019050919050565b6000602182527f7365712073686f756c642062652067726561746572207468616e206265666f7260208301527f65000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000601f82527f64656c65746520756e6d617463686564207861207472616e73616374696f6e006020830152604082019050919050565b619e8e8161a27e565b82525050565b6000602082019050619ea96000830184619b16565b92915050565b60006020820190508181036000830152619ec98184619b25565b905092915050565b60006020820190508181036000830152619eeb8184619b93565b905092915050565b60006020820190508181036000830152619f0d8184619bc9565b905092915050565b60006060820190508181036000830152619f2f8186619bc9565b90508181036020830152619f438185619bc9565b90508181036040830152619f578184619bc9565b9050949350505050565b60006080820190508181036000830152619f7b8187619bc9565b90508181036020830152619f8f8186619bff565b90508181036040830152619fa38185619bc9565b90508181036060830152619fb78184619bc9565b905095945050505050565b6000602082019050818103600083015261",
        "9fdb81619c35565b9050919050565b60006020820190508181036000830152619ffb81619c6c565b9050919050565b6000602082019050818103600083015261a01b81619ca3565b9050919050565b6000602082019050818103600083015261a03b81619d00565b9050919050565b6000602082019050818103600083015261a05b81619d5d565b9050919050565b6000602082019050818103600083015261a07b81619dba565b9050919050565b6000602082019050818103600083015261a09b81619df1565b9050919050565b6000602082019050818103600083015261a0bb81619e4e565b9050919050565b600060208201905061a0d76000830184619e85565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561a10057600080fd5b8060405250919050565b600067ffffffffffffffff82111561a12157600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561a14957600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561a17157600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561a19957600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561a1c557600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561a1f157600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600061a2578261a25e565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061a2938261a25e565b9050919050565b60008160030b9050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561a2de57808201518184015260208101905061a2c3565b8381111561a2ed576000848401525b50505050565b6000601f19601f830116905091905056fe7265736f75726365206973206c6f636b656420627920756e66696e6973686564207861207472616e73616374696f6e3a20206973206c6f636b656420627920756e66696e6973686564207861207472616e73616374696f6e3a2020697320756e7265676973746572656420696e207861207472616e73616374696f6e2020697320756e7265676973746572656420696e207861207472616e73616374696f6e3a20a265627a7a7230582017f10ab85d5b063a001c2c9b1689dc417959337a985141ff864d008181be66356c6578706572696d656e74616cf50037"
    };

    public static final String SM_BINARY =
            org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {
        "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_path\",\"type\":\"string\"}],\"name\":\"addPath\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_xaTransactionID\",\"type\":\"string\"}],\"name\":\"commitXATransaction\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_argsWithMethodId\",\"type\":\"bytes\"}],\"name\":\"constantCall\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_XATransactionID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_path\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_func\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_args\",\"type\":\"bytes\"}],\"name\":\"constantCall\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deletePathList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bin\",\"type\":\"bytes\"}],\"name\":\"deployContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_path\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_bin\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_abi\",\"type\":\"string\"}],\"name\":\"deployContractWithRegisterBFS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestXATransaction\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestXATransactionID\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaths\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_xaTransactionID\",\"type\":\"string\"}],\"name\":\"getXATransaction\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getXATransactionNumber\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_path\",\"type\":\"string\"}],\"name\":\"getXATransactionState\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_path\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_addr\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_abi\",\"type\":\"string\"}],\"name\":\"linkBFS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_index\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"listXATransactions\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"readlink\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_address\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_abi\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_xaTransactionID\",\"type\":\"string\"}],\"name\":\"rollbackAndDeleteXATransactionTask\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_xaTransactionID\",\"type\":\"string\"}],\"name\":\"rollbackXATransaction\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_argsWithMethodId\",\"type\":\"bytes\"}],\"name\":\"sendTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_XATransactionID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_XATransactionSeq\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_path\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_func\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_args\",\"type\":\"bytes\"}],\"name\":\"sendTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_xaTransactionID\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"_selfPaths\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_otherPaths\",\"type\":\"string[]\"}],\"name\":\"startXATransaction\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_str\",\"type\":\"string\"}],\"name\":\"stringToUint256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]"
    };

    public static final String ABI = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_ADDPATH = "addPath";

    public static final String FUNC_COMMITXATRANSACTION = "commitXATransaction";

    public static final String FUNC_CONSTANTCALL = "constantCall";

    public static final String FUNC_DELETEPATHLIST = "deletePathList";

    public static final String FUNC_DEPLOYCONTRACT = "deployContract";

    public static final String FUNC_DEPLOYCONTRACTWITHREGISTERBFS = "deployContractWithRegisterBFS";

    public static final String FUNC_GETLATESTXATRANSACTION = "getLatestXATransaction";

    public static final String FUNC_GETLATESTXATRANSACTIONID = "getLatestXATransactionID";

    public static final String FUNC_GETPATHS = "getPaths";

    public static final String FUNC_GETVERSION = "getVersion";

    public static final String FUNC_GETXATRANSACTION = "getXATransaction";

    public static final String FUNC_GETXATRANSACTIONNUMBER = "getXATransactionNumber";

    public static final String FUNC_GETXATRANSACTIONSTATE = "getXATransactionState";

    public static final String FUNC_LINKBFS = "linkBFS";

    public static final String FUNC_LISTXATRANSACTIONS = "listXATransactions";

    public static final String FUNC_READLINK = "readlink";

    public static final String FUNC_ROLLBACKANDDELETEXATRANSACTIONTASK =
            "rollbackAndDeleteXATransactionTask";

    public static final String FUNC_ROLLBACKXATRANSACTION = "rollbackXATransaction";

    public static final String FUNC_SENDTRANSACTION = "sendTransaction";

    public static final String FUNC_STARTXATRANSACTION = "startXATransaction";

    public static final String FUNC_STRINGTOUINT256 = "stringToUint256";

    protected WeCrossProxy(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static String getABI() {
        return ABI;
    }

    public TransactionReceipt addPath(String _path) {
        final Function function =
                new Function(
                        FUNC_ADDPATH,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_path)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String addPath(String _path, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_ADDPATH,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_path)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddPath(String _path) {
        final Function function =
                new Function(
                        FUNC_ADDPATH,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_path)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public Tuple1<String> getAddPathInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_ADDPATH,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public TransactionReceipt commitXATransaction(String _xaTransactionID) {
        final Function function =
                new Function(
                        FUNC_COMMITXATRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _xaTransactionID)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String commitXATransaction(String _xaTransactionID, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_COMMITXATRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _xaTransactionID)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCommitXATransaction(String _xaTransactionID) {
        final Function function =
                new Function(
                        FUNC_COMMITXATRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _xaTransactionID)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public Tuple1<String> getCommitXATransactionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_COMMITXATRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public Tuple1<String> getCommitXATransactionOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_COMMITXATRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public TransactionReceipt constantCall(String _name, byte[] _argsWithMethodId) {
        final Function function =
                new Function(
                        FUNC_CONSTANTCALL,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_name),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(
                                        _argsWithMethodId)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String constantCall(
            String _name, byte[] _argsWithMethodId, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_CONSTANTCALL,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_name),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(
                                        _argsWithMethodId)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForConstantCall(String _name, byte[] _argsWithMethodId) {
        final Function function =
                new Function(
                        FUNC_CONSTANTCALL,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_name),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(
                                        _argsWithMethodId)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public Tuple2<String, byte[]> getConstantCallStringBytesInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_CONSTANTCALL,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicBytes>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, byte[]>(
                (String) results.get(0).getValue(), (byte[]) results.get(1).getValue());
    }

    public Tuple1<byte[]> getConstantCallStringBytesOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_CONSTANTCALL,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>((byte[]) results.get(0).getValue());
    }

    public TransactionReceipt constantCall(
            String _XATransactionID, String _path, String _func, byte[] _args) {
        final Function function =
                new Function(
                        FUNC_CONSTANTCALL,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _XATransactionID),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_path),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_func),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(_args)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String constantCall(
            String _XATransactionID,
            String _path,
            String _func,
            byte[] _args,
            TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_CONSTANTCALL,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _XATransactionID),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_path),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_func),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(_args)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForConstantCall(
            String _XATransactionID, String _path, String _func, byte[] _args) {
        final Function function =
                new Function(
                        FUNC_CONSTANTCALL,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _XATransactionID),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_path),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_func),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(_args)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, String, byte[]> getConstantCallStringStringStringBytesInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_CONSTANTCALL,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicBytes>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, String, byte[]>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (byte[]) results.get(3).getValue());
    }

    public Tuple1<byte[]> getConstantCallStringStringStringBytesOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_CONSTANTCALL,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>((byte[]) results.get(0).getValue());
    }

    public TransactionReceipt deletePathList() {
        final Function function =
                new Function(
                        FUNC_DELETEPATHLIST,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String deletePathList(TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_DELETEPATHLIST,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeletePathList() {
        final Function function =
                new Function(
                        FUNC_DELETEPATHLIST,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public TransactionReceipt deployContract(byte[] _bin) {
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(_bin)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String deployContract(byte[] _bin, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(_bin)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeployContract(byte[] _bin) {
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(_bin)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getDeployContractInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACT,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>((byte[]) results.get(0).getValue());
    }

    public Tuple1<String> getDeployContractOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACT,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public TransactionReceipt deployContractWithRegisterBFS(
            String _path, byte[] _bin, String _abi) {
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACTWITHREGISTERBFS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_path),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(_bin),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_abi)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String deployContractWithRegisterBFS(
            String _path, byte[] _bin, String _abi, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACTWITHREGISTERBFS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_path),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(_bin),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_abi)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeployContractWithRegisterBFS(
            String _path, byte[] _bin, String _abi) {
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACTWITHREGISTERBFS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_path),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(_bin),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_abi)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public Tuple3<String, byte[], String> getDeployContractWithRegisterBFSInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACTWITHREGISTERBFS,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicBytes>() {},
                                new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, byte[], String>(
                (String) results.get(0).getValue(),
                (byte[]) results.get(1).getValue(),
                (String) results.get(2).getValue());
    }

    public Tuple1<String> getDeployContractWithRegisterBFSOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACTWITHREGISTERBFS,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public String getLatestXATransaction() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETLATESTXATRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String getLatestXATransactionID() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETLATESTXATRANSACTIONID,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public List getPaths() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETPATHS,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt getVersion() {
        final Function function =
                new Function(
                        FUNC_GETVERSION,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getVersion(TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_GETVERSION,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGetVersion() {
        final Function function =
                new Function(
                        FUNC_GETVERSION,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public Tuple1<String> getGetVersionOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_GETVERSION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public String getXATransaction(String _xaTransactionID) throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETXATRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _xaTransactionID)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String getXATransactionNumber() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETXATRANSACTIONNUMBER,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String getXATransactionState(String _path) throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETXATRANSACTIONSTATE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_path)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt linkBFS(String _path, String _addr, String _abi) {
        final Function function =
                new Function(
                        FUNC_LINKBFS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_path),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_addr),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_abi)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String linkBFS(String _path, String _addr, String _abi, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_LINKBFS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_path),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_addr),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_abi)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForLinkBFS(String _path, String _addr, String _abi) {
        final Function function =
                new Function(
                        FUNC_LINKBFS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_path),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_addr),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_abi)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getLinkBFSInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_LINKBFS,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue());
    }

    public String listXATransactions(String _index, BigInteger _size) throws ContractException {
        final Function function =
                new Function(
                        FUNC_LISTXATRANSACTIONS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_index),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(_size)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Tuple3<String, String, String> readlink(String name) throws ContractException {
        final Function function =
                new Function(
                        FUNC_READLINK,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(name)),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<String, String, String>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue());
    }

    public TransactionReceipt rollbackAndDeleteXATransactionTask(String _xaTransactionID) {
        final Function function =
                new Function(
                        FUNC_ROLLBACKANDDELETEXATRANSACTIONTASK,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _xaTransactionID)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String rollbackAndDeleteXATransactionTask(
            String _xaTransactionID, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_ROLLBACKANDDELETEXATRANSACTIONTASK,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _xaTransactionID)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRollbackAndDeleteXATransactionTask(
            String _xaTransactionID) {
        final Function function =
                new Function(
                        FUNC_ROLLBACKANDDELETEXATRANSACTIONTASK,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _xaTransactionID)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public Tuple1<String> getRollbackAndDeleteXATransactionTaskInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_ROLLBACKANDDELETEXATRANSACTIONTASK,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public Tuple1<String> getRollbackAndDeleteXATransactionTaskOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_ROLLBACKANDDELETEXATRANSACTIONTASK,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public TransactionReceipt rollbackXATransaction(String _xaTransactionID) {
        final Function function =
                new Function(
                        FUNC_ROLLBACKXATRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _xaTransactionID)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String rollbackXATransaction(String _xaTransactionID, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_ROLLBACKXATRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _xaTransactionID)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRollbackXATransaction(String _xaTransactionID) {
        final Function function =
                new Function(
                        FUNC_ROLLBACKXATRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _xaTransactionID)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public Tuple1<String> getRollbackXATransactionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_ROLLBACKXATRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public Tuple1<String> getRollbackXATransactionOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_ROLLBACKXATRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public TransactionReceipt sendTransaction(String _uid, String _name, byte[] _argsWithMethodId) {
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_uid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_name),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(
                                        _argsWithMethodId)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String sendTransaction(
            String _uid, String _name, byte[] _argsWithMethodId, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_uid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_name),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(
                                        _argsWithMethodId)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSendTransaction(
            String _uid, String _name, byte[] _argsWithMethodId) {
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_uid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_name),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(
                                        _argsWithMethodId)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, byte[]> getSendTransactionStringStringBytesInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicBytes>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, byte[]>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (byte[]) results.get(2).getValue());
    }

    public Tuple1<byte[]> getSendTransactionStringStringBytesOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>((byte[]) results.get(0).getValue());
    }

    public TransactionReceipt sendTransaction(
            String _uid,
            String _XATransactionID,
            BigInteger _XATransactionSeq,
            String _path,
            String _func,
            byte[] _args) {
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_uid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _XATransactionID),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(
                                        _XATransactionSeq),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_path),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_func),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(_args)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String sendTransaction(
            String _uid,
            String _XATransactionID,
            BigInteger _XATransactionSeq,
            String _path,
            String _func,
            byte[] _args,
            TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_uid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _XATransactionID),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(
                                        _XATransactionSeq),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_path),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_func),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(_args)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSendTransaction(
            String _uid,
            String _XATransactionID,
            BigInteger _XATransactionSeq,
            String _path,
            String _func,
            byte[] _args) {
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_uid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _XATransactionID),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(
                                        _XATransactionSeq),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_path),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_func),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(_args)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public Tuple6<String, String, BigInteger, String, String, byte[]>
            getSendTransactionStringStringUint256StringStringBytesInput(
                    TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Uint256>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicBytes>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple6<String, String, BigInteger, String, String, byte[]>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (byte[]) results.get(5).getValue());
    }

    public Tuple1<byte[]> getSendTransactionStringStringUint256StringStringBytesOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>((byte[]) results.get(0).getValue());
    }

    public TransactionReceipt startXATransaction(
            String _xaTransactionID, List<String> _selfPaths, List<String> _otherPaths) {
        final Function function =
                new Function(
                        FUNC_STARTXATRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _xaTransactionID),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                _selfPaths,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class)),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                _otherPaths,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String startXATransaction(
            String _xaTransactionID,
            List<String> _selfPaths,
            List<String> _otherPaths,
            TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_STARTXATRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _xaTransactionID),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                _selfPaths,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class)),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                _otherPaths,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForStartXATransaction(
            String _xaTransactionID, List<String> _selfPaths, List<String> _otherPaths) {
        final Function function =
                new Function(
                        FUNC_STARTXATRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _xaTransactionID),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                _selfPaths,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class)),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                _otherPaths,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public Tuple3<String, List<String>, List<String>> getStartXATransactionInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_STARTXATRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, List<String>, List<String>>(
                (String) results.get(0).getValue(),
                convertToNative((List<Utf8String>) results.get(1).getValue()),
                convertToNative((List<Utf8String>) results.get(2).getValue()));
    }

    public Tuple1<String> getStartXATransactionOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_STARTXATRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public TransactionReceipt stringToUint256(String _str) {
        final Function function =
                new Function(
                        FUNC_STRINGTOUINT256,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_str)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String stringToUint256(String _str, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_STRINGTOUINT256,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_str)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForStringToUint256(String _str) {
        final Function function =
                new Function(
                        FUNC_STRINGTOUINT256,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_str)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public Tuple1<String> getStringToUint256Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_STRINGTOUINT256,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public Tuple1<BigInteger> getStringToUint256Output(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_STRINGTOUINT256,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>((BigInteger) results.get(0).getValue());
    }

    public static WeCrossProxy load(
            String contractAddress, Client client, CryptoKeyPair credential) {
        return new WeCrossProxy(contractAddress, client, credential);
    }

    public static WeCrossProxy deploy(Client client, CryptoKeyPair credential)
            throws ContractException {
        return deploy(
                WeCrossProxy.class,
                client,
                credential,
                getBinary(client.getCryptoSuite()),
                getABI(),
                null,
                null);
    }
}
